// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from usnit.djinni

#include "NativeUsnitEventGen.hpp"  // my header
#include "Marshal.hpp"
#include "NativeUsnitEventType.hpp"

namespace djinni_generated {

NativeUsnitEventGen::NativeUsnitEventGen() : ::djinni::JniInterface<::usnit::UsnitEventGen, NativeUsnitEventGen>("dyno/fun/usnit/UsnitEventGen$CppProxy") {}

NativeUsnitEventGen::~NativeUsnitEventGen() = default;

NativeUsnitEventGen::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeUsnitEventGen::JavaProxy::~JavaProxy() = default;

bool NativeUsnitEventGen::JavaProxy::callback(::usnit::UsnitEventType c_id, const std::string & c_data) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeUsnitEventGen>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_callback,
                                          ::djinni::get(::djinni_generated::NativeUsnitEventType::fromCpp(jniEnv, c_id)),
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_data)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}

CJNIEXPORT void JNICALL Java_dyno_fun_usnit_UsnitEventGen_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::usnit::UsnitEventGen>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jboolean JNICALL Java_dyno_fun_usnit_UsnitEventGen_00024CppProxy_native_1callback(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_id, jstring j_data)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::usnit::UsnitEventGen>(nativeRef);
        auto r = ref->callback(::djinni_generated::NativeUsnitEventType::toCpp(jniEnv, j_id),
                               ::djinni::String::toCpp(jniEnv, j_data));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
