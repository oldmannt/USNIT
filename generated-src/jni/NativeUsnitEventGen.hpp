// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from usnit.djinni

#pragma once

#include "djinni_support.hpp"
#include "usnit_event_gen.hpp"

namespace djinni_generated {

class NativeUsnitEventGen final : ::djinni::JniInterface<::usnit::UsnitEventGen, NativeUsnitEventGen> {
public:
    using CppType = std::shared_ptr<::usnit::UsnitEventGen>;
    using CppOptType = std::shared_ptr<::usnit::UsnitEventGen>;
    using JniType = jobject;

    using Boxed = NativeUsnitEventGen;

    ~NativeUsnitEventGen();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeUsnitEventGen>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeUsnitEventGen>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeUsnitEventGen();
    friend ::djinni::JniClass<NativeUsnitEventGen>;
    friend ::djinni::JniInterface<::usnit::UsnitEventGen, NativeUsnitEventGen>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::usnit::UsnitEventGen
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        bool callback(::usnit::UsnitEventType id, const std::string & data) override;

    private:
        friend ::djinni::JniInterface<::usnit::UsnitEventGen, ::djinni_generated::NativeUsnitEventGen>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("dyno/fun/usnit/UsnitEventGen") };
    const jmethodID method_callback { ::djinni::jniGetMethodID(clazz.get(), "callback", "(Ldyno/fun/usnit/UsnitEventType;Ljava/lang/String;)Z") };
};

}  // namespace djinni_generated
