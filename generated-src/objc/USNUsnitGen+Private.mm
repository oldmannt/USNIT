// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from usnit.djinni

#import "USNUsnitGen+Private.h"
#import "USNUsnitGen.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "USNUsnitEventGen+Private.h"
#import "USNUsnitGen+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface USNUsnitGen ()

- (id)initWithCpp:(const std::shared_ptr<::usnit::UsnitGen>&)cppRef;

@end

@implementation USNUsnitGen {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::usnit::UsnitGen>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::usnit::UsnitGen>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable USNUsnitGen *)instance {
    try {
        auto r = ::usnit::UsnitGen::instance();
        return ::djinni_generated::UsnitGen::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)initialize:(nonnull NSString *)conf
              lang:(USNLangType)lang
          callback:(nullable id<USNUsnitEventGen>)callback {
    try {
        auto r = _cppRefHandle.get()->initialize(::djinni::String::toCpp(conf),
                                                 ::djinni::Enum<::usnit::LangType, USNLangType>::toCpp(lang),
                                                 ::djinni_generated::UsnitEventGen::toCpp(callback));
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)save {
    try {
        auto r = _cppRefHandle.get()->save();
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setType:(USNUsnitType)type {
    try {
        _cppRefHandle.get()->setType(::djinni::Enum<::usnit::UsnitType, USNUsnitType>::toCpp(type));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setInput:(float)value {
    try {
        _cppRefHandle.get()->setInput(::djinni::F32::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getResult:(USNUsnitType)type {
    try {
        auto r = _cppRefHandle.get()->getResult(::djinni::Enum<::usnit::UsnitType, USNUsnitType>::toCpp(type));
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getUnitName:(USNUsnitType)type {
    try {
        auto r = _cppRefHandle.get()->getUnitName(::djinni::Enum<::usnit::UsnitType, USNUsnitType>::toCpp(type));
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (USNUsnitType)getLongType {
    try {
        auto r = _cppRefHandle.get()->getLongType();
        return ::djinni::Enum<::usnit::UsnitType, USNUsnitType>::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (USNUsnitType)getMassType {
    try {
        auto r = _cppRefHandle.get()->getMassType();
        return ::djinni::Enum<::usnit::UsnitType, USNUsnitType>::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (USNUsnitType)getSquareType {
    try {
        auto r = _cppRefHandle.get()->getSquareType();
        return ::djinni::Enum<::usnit::UsnitType, USNUsnitType>::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (USNUsnitType)getVolumeType {
    try {
        auto r = _cppRefHandle.get()->getVolumeType();
        return ::djinni::Enum<::usnit::UsnitType, USNUsnitType>::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)buildView:(nonnull NSString *)viewName {
    try {
        _cppRefHandle.get()->buildView(::djinni::String::toCpp(viewName));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto UsnitGen::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto UsnitGen::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<USNUsnitGen>(cpp);
}

}  // namespace djinni_generated

@end
